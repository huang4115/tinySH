                      +-=-=-=-=-=-=-=-=-=-=-=-=-=-=-+
                      |   NFS_SMWS_ALARM 编码规范   |
                      +-=-=-=-=-=-=-=-=-=-=-=-=-=-=-+
 说明
 ~~~~   

    一个有规则的编码可以添加项目的可读性，与及后期的可维护性与二次开发性。本文档
	旨在说明在本项目中，明文要求的编码规则。后期开发人员，应沿用本文所规定的规进
	行编码。
   
================================================================================

 注释
 ~~~~

    [注释方式]

	  * 对于单行注释，使用行注释 //
	  * 对于多行注释，使用段注释 /* ... */
	
	[注释内容]
	  * 对于难于理解的语句进行注释说明，如下摘自packet.c :
		
		if(!isPacketInitialized){
			/**
			 *  由于PACKET_receive()由中断调用。很可能在帧接收模块还未初始化完成前就被调
			 *  用，会导致不可预计的结果。故，在此用isPacketInitialized变量规避这个问题。
			 *  isPacketInitialized变量由PACKET_init()完成初始化后置为true。在之前，所有
			 *  有本函数调用都无效。
			 */
			return;
		}	


	  * 在出现与文档关系较为密切的语句，需要用段注释说明参考文档。必要时需要将文档
	    中的部分内容写在注释内。如下：

		/**
		 *    电话呼叫请求命令格式：
		 *    +------+------+--------+--------+-------+-------+-----+-------+---------------------+
		 *    | ID号 | 标志 | 号码数 |  长度  | 号码1 | 号码2 | ... | 号码N | 语音内容 			  |
		 *    +-------------+--------+--------+-------+-------+-----+-------+---------------------+
		 *    |  1B	 |  1B  |   1B   | < 256B |       |       |     |       |                     |
		 *    +------+------+--------+--------+-------+-------+-----+-------+---------------------+
		 *    注：
		 *       1. ID号--为命令标识
		 *       2. 标志--指定命令是否加急
		 *       3. 号码数--电话号码的个数
		 *       4.	长度--语音内容长度，不含'\0'
		 *       5. 号码1~N
		 *       6. 语音内容
		 */


 头文件
 ~~~~~~

    头文件以.h结尾，旨在声明其对应的.c文件中有什么可以被引用。
	在头文件中，尽量少包含别的头文件，除非在头文件中需要引用其它头文件中声明的内容。

	由于头文件可能被重复包含，故用宏避免重包含的问题。
	
    ========= XXXX.h ==================================
    |1:  #ifndef	__XXXX_H__						  |
    |2:  #define	__XXXX_H__						  |
	|3:												  |
	|...                                              |
	|n:  #endif //__XXXX_H__						  |
    ========= XXXX.h ==================================
	

	


 源文件
 ~~~~~~
   
	源文件是以.c结尾的文件，主要是定义变量与函数的定义。
	如果源文件需要多次被其它模块调用，那么需要对该源文件创建一个.h文件。在头文件中必须包含
	对应的文件。
    
 关于错误打印
 ~~~~~~~~~~~~

    系统中，有三种信息打印方式：

	1. printf , puts , putchar 系列

	   该系列只将信息打印到控制台接口，不关于处于什么状态。适合用于

	2. PERROR(ERROR,INFOR)

	   该函数将会打印INFOR字串，并同时打印出错时的文件名，函数，行号等信息。一般用于打印由
	   于程序自身导致的错误信息。旨在调试使用。

	3. debug_printf , debug_puts

       用以上两个函数打印的信息，只会在非控制台模式下显示。通常用于显示程序正常运行状况。


===END===